import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useContext } from "react";
import Sidebar from "../components/sidebar";
import Footer from "../components/footer";
import { Fragment, useState, useRef } from "react";
import { Line, Bar } from "react-chartjs-2";
import { Chart as ChartJS } from "chart.js/auto";
import { ToastContainer } from "react-toastify";
import { AuthContext, isTokenValid, toastError, toastSuccess } from "../components/request";
import { useRouter } from "next/router";
import axios from "axios";


import { BsFillPlusCircleFill } from "react-icons/bs";
import { RiDeviceFill } from "react-icons/ri";
import { AiTwotoneDelete } from "react-icons/ai";
import { Button, Modal, Label, TextInput, Checkbox } from "flowbite-react";
import PuffLoader from "react-spinners/PuffLoader";

export default function Home() {
  const router = useRouter();
  const { token, setToken } = useContext(AuthContext);
  const [checkingAuth, setCheckingAuth] = useState(true);
  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);
  const [deviceList, setDeviceList] = useState([])

  const machineMacRef = useRef(null)



  const handleAddDeviceForm = (e) => {
    e.preventDefault();
    axios.post('api/assign', { machineMac: machineMacRef.current.value }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    }).then(res => {
      fetchDeviceList()
      setIsAddDeviceModalOpen(false);
      machineMacRef.current.value = ""
      toastSuccess("Successfully Added!!")
    }).catch(err => {
      if (err.response.status === 422) {
        setIsAddDeviceModalOpen(false);
        machineMacRef.current.value = ""
        toastError(err.response.data.errors.machineMac)
      } else {
        toastError("Something went wrong!!")
      }
    });
  }

  const handleDeleteDevice = (deviceId) => {
    axios.delete(`api/assign/${deviceId}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    }).then(res => {
      fetchDeviceList()
      toastSuccess("Removed Successfully!!")
    }).catch(err => {
      toastError("Something went wrong!!")
    });
  }

  const fetchDeviceList = () => {
    axios.get('api/assign/own', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    }).then(res => {
      // console.log(res.data);
      setDeviceList(res.data)
    }).catch(error => {
      console.log(error);
    });
  }

  useEffect(() => {
    // console.log("Check Toekn>>", isTokenValid(token));
    console.log("Index Token>>", token);
    if (!token) {
      router.push("login");
    } else {
      fetchDeviceList()
      setCheckingAuth(false);
    }
  }, []);

  // This is for view a loading screen while it searching for Token
  if (checkingAuth) {
    return (
      <div className="w-screen h-screen flex justify-center items-center">
        <PuffLoader color="#36d7b7" />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>LogByte - Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <ToastContainer />
        <div className="sm:max-w-6xl mx-auto mt-8 px-6">
          <div className="grid grid-cols-12 gap-12 mb-5">
            <div className="col-span-5 sm:col-span-4 md:col-span-3">
              <Sidebar />
            </div>
            <div className="col-span-7 sm:col-span-8 md:col-span-9">
              <div className="flex flex-col shadow rounded-xl p-6">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
                  <div
                    onClick={() => {
                      setIsAddDeviceModalOpen(true);
                    }}
                    className="bg-sf-green-600 rounded-xl shadow h-32 flex-col flex items-center justify-center cursor-pointer group hover:bg-sf-green-500 hover:shadow-2xl transition-all duration-300"
                  >
                    <BsFillPlusCircleFill className="text-sf-green-200 text-3xl group-hover:text-white transition-all duration-300" />
                    <span className="text-sf-green-200 text-xs mt-1 group-hover:text-white transition-all duration-300">
                      Add Device
                    </span>
                  </div>
                  <>
                    <Modal
                      show={isAddDeviceModalOpen}
                      size="md"
                      popup={true}
                      onClose={() => {
                        setIsAddDeviceModalOpen(false);
                      }}
                    >
                      <Modal.Header />
                      <Modal.Body>
                        <form onSubmit={(e) => handleAddDeviceForm(e)} className="space-y-6 px-6 pb-4 sm:pb-6 lg:px-8 xl:pb-8">
                          <h3 className="text-xl text-center font-medium text-gray-900 dark:text-white">
                            Add a Device
                          </h3>
                          <div>
                            <div className="mb-2 block">
                              <Label htmlFor="machineMac" value="Device MAC" />
                            </div>
                            <TextInput id="machineMac" name="machineMac" ref={machineMacRef} placeholder="LBXXXXX" required={true} />
                          </div>


                          <div className="flex justify-center">
                            <Button type="submit">Add</Button>
                          </div>

                        </form>
                      </Modal.Body>
                    </Modal>
                  </>
                  {deviceList && deviceList.map((item, index) => {
                    return (
                      <div className="bg-sf-green-600 rounded-xl shadow h-32 flex flex-col group items-center cursor-pointer relative hover:bg-sf-green-500 hover:shadow-2xl transition-all duration-300">
                        <div className="text-xs text-white my-1 flex items-center absolute top-0">
                          <span className="text-sm text-sf-green-200">{item.status === 1 ? "Online" : "Offline"}</span>
                          <div className={`${item.status === 1 ? 'bg-green-400' : 'bg-red-600'} rounded-full w-2 h-2 ml-1`}></div>
                        </div>
                        <div className="my-auto flex flex-col items-center select-none">
                          <RiDeviceFill className="text-sf-green-200 text-3xl group-hover:text-sf-green-50 transition-all duration-300" />
                          <span className="text-sf-green-200 text-xs mt-1 line-clamp-1 group-hover:text-sf-green-50 transition-all duration-300">
                            {item.machineMac}
                          </span>
                        </div>
                        <div className="text-xs text-white my-1 group-hover:flex items-center absolute bottom-0 hidden transition-all duration-300">
                          <AiTwotoneDelete onClick={() => handleDeleteDevice(item.fkMachineId)} className="text-xl my-1 text-red-700 hover:scale-125 cursor-pointer transition-all duration-300 hover:bg-red-700 hover:text-sf-green-200 rounded-full hover:p-1" />
                        </div>
                      </div>
                    )
                  })}

                  {/* <div className="bg-sf-green-600 rounded-xl shadow h-32 flex flex-col group items-center cursor-pointer relative hover:bg-sf-green-500 hover:shadow-2xl transition-all duration-300">
                    <div className="text-xs text-white my-1 flex items-center absolute top-0">
                      <span className="text-sm text-sf-green-200">Offline</span>
                      <div className="bg-red-700 rounded-full w-2 h-2 ml-1"></div>
                    </div>
                    <div className="my-auto flex flex-col items-center select-none">
                      <RiDeviceFill className="text-sf-green-200 text-3xl group-hover:text-sf-green-50 transition-all duration-300" />
                      <span className="text-sf-green-200 text-xs mt-1 line-clamp-1 group-hover:text-sf-green-50 transition-all duration-300">
                        Device Name
                      </span>
                    </div>
                    <div className="text-xs text-white my-1 group-hover:flex items-center absolute bottom-0 hidden transition-all duration-300">
                      <AiTwotoneDelete className="text-xl my-1 text-red-700 hover:scale-125 cursor-pointer transition-all duration-300 hover:bg-red-700 hover:text-sf-green-200 rounded-full hover:p-1" />
                    </div>
                  </div> */}
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
}
