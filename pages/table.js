import Head from "next/head";
import Link from "next/link";
import React, { useContext, useEffect } from "react";
import Sidebar from "../components/sidebar";
import Footer from "../components/footer";
import { Fragment, useState, useRef } from "react";
import { Line, Bar, Pie } from "react-chartjs-2";
import { Chart as ChartJS } from "chart.js/auto";
import { Select } from "flowbite-react";
import axios from "axios";
import { useRouter } from "next/router";
import { AuthContext, isTokenValid } from "../components/request";
import { PuffLoader } from "react-spinners";

export default function Home() {
  const router = useRouter();
  const { token, setToken } = useContext(AuthContext);
  const [checkingAuth, setCheckingAuth] = useState(true);
  const [deviceList, setDeviceList] = useState([]);
  const [deviceData, setDeviceData] = useState([]);
  const [selectedMachineId, setSelectedMachineId] = useState(null);
  const [selectedType, setSelectedType] = useState(null);
  const [tableData, setTableData] = useState(null);
  const [graphLabels, setGraphLabels] = useState([]);
  const [from, setFrom] = useState(new Date(Date.now() - 864e5 * 6));
  const [to, setTo] = useState(new Date());

  const fetchDeviceData = () => {
    axios
      .post(
        `api/data/machine/${selectedMachineId}/filter`,
        { from, to },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      .then((res) => {
        setDeviceData(res.data);
        setSelectedType(Object.keys(res.data)[0]);
      })
      .catch((error) => {
        console.log(error);
      });
  };
  const fetchDeviceList = () => {
    axios
      .get("api/assign/own", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then((res) => {
        // console.log(res.data);
        setDeviceList(res.data);
        setSelectedMachineId(res.data[0].fkMachineId);
      })
      .catch((error) => {
        console.log(error);
      });
  };
  useEffect(() => {
    if (deviceData && selectedType) {
      setTableData(deviceData[selectedType]);
    }
    else
    setTableData(null)
  }, [selectedType, deviceData]);

  useEffect(() => {
    if (!isTokenValid(token)) {
      router.push("login");
    } else {
      fetchDeviceList();
      setCheckingAuth(false);
    }
  }, []);

  useEffect(() => {
    if (selectedMachineId) fetchDeviceData();
  }, [selectedMachineId, from, to]);

  // This is for view a loading screen while it searching for Token
  if (checkingAuth) {
    return (
      <div className="w-screen h-screen flex justify-center items-center">
        <PuffLoader color="#36d7b7" />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>LogByte - Table</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="sm:max-w-6xl mx-auto mt-8 px-6">
          <div className="grid grid-cols-12 gap-12 mb-5">
            <div className="col-span-5 sm:col-span-4 md:col-span-3">
              <Sidebar />
            </div>
            <div className="col-span-7 sm:col-span-8 md:col-span-9">
              <div className="flex flex-col shadow rounded-xl p-6">
                <div className="mx-auto mb-6">
                  {/* Select Device */}
                  <select
                    id="machine"
                    onChange={(e) => setSelectedMachineId(e.target.value)}
                    className="bg-gray-50 border border-gray-300 text-gray-900 mb-6 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  >
                    {deviceList.map((item, index) => {
                      return (
                        <option key={index} value={item.fkMachineId}>
                          {item.machineMac}
                        </option>
                      );
                    })}
                  </select>

                  <div className="flex">
                    <input
                      className="bg-gray-50 border border-gray-300 text-gray-900 mr-4 mb-6 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                      type="datetime-local"
                      value={from.toISOString().slice(0, -5)}
                      onChange={(e) => setFrom(new Date(e.target.value))}
                      name="from"
                      id="from"
                    />
                    <input
                      className="bg-gray-50 border border-gray-300 text-gray-900 mb-6 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                      type="datetime-local"
                      value={to.toISOString().slice(0, -5)}
                      onChange={(e) => setTo(new Date(e.target.value))}
                      name="to"
                      id="to"
                    />
                  </div>
                  {/* Select DataType */}
                  <select
                    id="type"
                    onChange={(e) => setSelectedType(e.target.value)}
                    className="bg-gray-50 border border-gray-300 text-gray-900 mb-6 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  >
                    {deviceData &&
                      Object.keys(deviceData).map((item, index) => {
                        return (
                          <option key={index} value={item}>
                            {item.charAt(0).toUpperCase() + item.slice(1)}
                          </option>
                        );
                      })}
                  </select>
                </div>
                <div className="">
                  <div className="relative overflow-x-auto shadow-md sm:rounded-lg">
                    <table className="w-full text-sm text-left text-gray-500">
                      <thead className="text-xs text-white uppercase bg-lb-green-600">
                        <tr>
                          <th scope="col" className="px-6 py-3">
                            Date
                          </th>
                          <th scope="col" className="px-6 py-3">
                            Time
                          </th>
                          <th scope="col" className="px-6 py-3">
                            Data
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        {tableData?.val.map((item, index) => {
                          if (item)
                            return (
                              <tr
                                key={index}
                                className="bg-white border-b dark:bg-gray-900 dark:border-gray-700"
                              >
                                <td className="px-6 py-4">
                                  {tableData?.label[index].split("T")[0]}
                                </td>
                                <td className="px-6 py-4">
                                  {new Date(tableData?.label[index]).toLocaleString("en-US", {
                                    hour: "numeric",
                                    minute: "numeric",
                                    hour12: true,
                                  })}
                                </td>
                                <td className="px-6 py-4">{item}</td>
                              </tr>
                            );
                        })}
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* <div className="mt-6 mx-auto">
                  <nav aria-label="Page navigation example">
                    <ul className="inline-flex -space-x-px">
                      <li>
                        <a
                          href="#"
                          className="px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        >
                          Previous
                        </a>
                      </li>
                      <li>
                        <a
                          href="#"
                          className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        >
                          1
                        </a>
                      </li>
                      <li>
                        <a
                          href="#"
                          className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        >
                          2
                        </a>
                      </li>
                      <li>
                        <a
                          href="#"
                          aria-current="page"
                          className="px-3 py-2 text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white"
                        >
                          3
                        </a>
                      </li>
                      <li>
                        <a
                          href="#"
                          className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        >
                          4
                        </a>
                      </li>
                      <li>
                        <a
                          href="#"
                          className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        >
                          5
                        </a>
                      </li>
                      <li>
                        <a
                          href="#"
                          className="px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                        >
                          Next
                        </a>
                      </li>
                    </ul>
                  </nav>
                </div> */}
              </div>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
}
